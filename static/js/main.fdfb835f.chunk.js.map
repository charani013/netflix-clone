{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","sunstr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdfb835f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/** base url to make requests to the movie database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n})\r\n\r\nexport default instance;","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n    // A snippet of code which runs based on a specific condition/variables\r\n\r\n    useEffect(()=>{\r\n\r\n        // if [], run once when the row loads, and dont run again\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n\r\n    },[fetchUrl]);\r\n\r\n    const opts = {\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            autoplay:1,\r\n        },\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {/* several row_poster(s) */}\r\n\r\n                {movies.map(movie => (\r\n                    // \"/xmbU4JTUm8rsdtn7Y3Fcm30GpeT.jpg\"\r\n                    <img className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} key={movie.id} onClick={() => handleClick(movie)}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path:movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"19b6d32a529347f6a805fec6734d9ebd\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n}\r\n\r\nexport default requests;","import React,{useEffect, useState} from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(request.data.results[Math.floor(Math.random()*request.data.results.length-1)]);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    console.log(movie)\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.sunstr(0,n - 1)+\"...\": str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{backgroundSize:\"cover\",\r\n        backgroundImage:`url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n            backgroundPosition:\"center center\",\r\n            }}>\r\n            <div className = \"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n\r\n\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n\r\n    const [show,handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",() => {\r\n            if (window.scrollY > 100){\r\n                handleShow(true);\r\n\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        } \r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix Logo\"/>\r\n            <img className=\"nav_avatar\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Netflix Logo\" />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport './App.css';\n\n\nfunction App() {\n    return ( \n        <div className = \"App\">\n            <Nav />\n            <Banner />\n            <Row title = \"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\n            <Row title = \"Trending Now\" fetchUrl={requests.fetchTrending}/>  \n            <Row title = \"Top Rated\" fetchUrl={requests.fetchTopRated}/>  \n            <Row title = \"Action Movies\" fetchUrl={requests.fetchActionMovies}/>  \n            <Row title = \"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>  \n            <Row title = \"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>  \n            <Row title = \"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>  \n            <Row title = \"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>            \n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}